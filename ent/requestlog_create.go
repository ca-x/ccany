// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/requestlog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RequestLogCreate is the builder for creating a RequestLog entity.
type RequestLogCreate struct {
	config
	mutation *RequestLogMutation
	hooks    []Hook
}

// SetClaudeModel sets the "claude_model" field.
func (rlc *RequestLogCreate) SetClaudeModel(s string) *RequestLogCreate {
	rlc.mutation.SetClaudeModel(s)
	return rlc
}

// SetOpenaiModel sets the "openai_model" field.
func (rlc *RequestLogCreate) SetOpenaiModel(s string) *RequestLogCreate {
	rlc.mutation.SetOpenaiModel(s)
	return rlc
}

// SetRequestBody sets the "request_body" field.
func (rlc *RequestLogCreate) SetRequestBody(s string) *RequestLogCreate {
	rlc.mutation.SetRequestBody(s)
	return rlc
}

// SetResponseBody sets the "response_body" field.
func (rlc *RequestLogCreate) SetResponseBody(s string) *RequestLogCreate {
	rlc.mutation.SetResponseBody(s)
	return rlc
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableResponseBody(s *string) *RequestLogCreate {
	if s != nil {
		rlc.SetResponseBody(*s)
	}
	return rlc
}

// SetStatusCode sets the "status_code" field.
func (rlc *RequestLogCreate) SetStatusCode(i int) *RequestLogCreate {
	rlc.mutation.SetStatusCode(i)
	return rlc
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableStatusCode(i *int) *RequestLogCreate {
	if i != nil {
		rlc.SetStatusCode(*i)
	}
	return rlc
}

// SetIsStreaming sets the "is_streaming" field.
func (rlc *RequestLogCreate) SetIsStreaming(b bool) *RequestLogCreate {
	rlc.mutation.SetIsStreaming(b)
	return rlc
}

// SetNillableIsStreaming sets the "is_streaming" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableIsStreaming(b *bool) *RequestLogCreate {
	if b != nil {
		rlc.SetIsStreaming(*b)
	}
	return rlc
}

// SetInputTokens sets the "input_tokens" field.
func (rlc *RequestLogCreate) SetInputTokens(i int) *RequestLogCreate {
	rlc.mutation.SetInputTokens(i)
	return rlc
}

// SetNillableInputTokens sets the "input_tokens" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableInputTokens(i *int) *RequestLogCreate {
	if i != nil {
		rlc.SetInputTokens(*i)
	}
	return rlc
}

// SetOutputTokens sets the "output_tokens" field.
func (rlc *RequestLogCreate) SetOutputTokens(i int) *RequestLogCreate {
	rlc.mutation.SetOutputTokens(i)
	return rlc
}

// SetNillableOutputTokens sets the "output_tokens" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableOutputTokens(i *int) *RequestLogCreate {
	if i != nil {
		rlc.SetOutputTokens(*i)
	}
	return rlc
}

// SetDurationMs sets the "duration_ms" field.
func (rlc *RequestLogCreate) SetDurationMs(f float64) *RequestLogCreate {
	rlc.mutation.SetDurationMs(f)
	return rlc
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableDurationMs(f *float64) *RequestLogCreate {
	if f != nil {
		rlc.SetDurationMs(*f)
	}
	return rlc
}

// SetErrorMessage sets the "error_message" field.
func (rlc *RequestLogCreate) SetErrorMessage(s string) *RequestLogCreate {
	rlc.mutation.SetErrorMessage(s)
	return rlc
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableErrorMessage(s *string) *RequestLogCreate {
	if s != nil {
		rlc.SetErrorMessage(*s)
	}
	return rlc
}

// SetCreatedAt sets the "created_at" field.
func (rlc *RequestLogCreate) SetCreatedAt(t time.Time) *RequestLogCreate {
	rlc.mutation.SetCreatedAt(t)
	return rlc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableCreatedAt(t *time.Time) *RequestLogCreate {
	if t != nil {
		rlc.SetCreatedAt(*t)
	}
	return rlc
}

// SetUpdatedAt sets the "updated_at" field.
func (rlc *RequestLogCreate) SetUpdatedAt(t time.Time) *RequestLogCreate {
	rlc.mutation.SetUpdatedAt(t)
	return rlc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rlc *RequestLogCreate) SetNillableUpdatedAt(t *time.Time) *RequestLogCreate {
	if t != nil {
		rlc.SetUpdatedAt(*t)
	}
	return rlc
}

// SetID sets the "id" field.
func (rlc *RequestLogCreate) SetID(s string) *RequestLogCreate {
	rlc.mutation.SetID(s)
	return rlc
}

// Mutation returns the RequestLogMutation object of the builder.
func (rlc *RequestLogCreate) Mutation() *RequestLogMutation {
	return rlc.mutation
}

// Save creates the RequestLog in the database.
func (rlc *RequestLogCreate) Save(ctx context.Context) (*RequestLog, error) {
	rlc.defaults()
	return withHooks(ctx, rlc.sqlSave, rlc.mutation, rlc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rlc *RequestLogCreate) SaveX(ctx context.Context) *RequestLog {
	v, err := rlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlc *RequestLogCreate) Exec(ctx context.Context) error {
	_, err := rlc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlc *RequestLogCreate) ExecX(ctx context.Context) {
	if err := rlc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlc *RequestLogCreate) defaults() {
	if _, ok := rlc.mutation.StatusCode(); !ok {
		v := requestlog.DefaultStatusCode
		rlc.mutation.SetStatusCode(v)
	}
	if _, ok := rlc.mutation.IsStreaming(); !ok {
		v := requestlog.DefaultIsStreaming
		rlc.mutation.SetIsStreaming(v)
	}
	if _, ok := rlc.mutation.InputTokens(); !ok {
		v := requestlog.DefaultInputTokens
		rlc.mutation.SetInputTokens(v)
	}
	if _, ok := rlc.mutation.OutputTokens(); !ok {
		v := requestlog.DefaultOutputTokens
		rlc.mutation.SetOutputTokens(v)
	}
	if _, ok := rlc.mutation.DurationMs(); !ok {
		v := requestlog.DefaultDurationMs
		rlc.mutation.SetDurationMs(v)
	}
	if _, ok := rlc.mutation.CreatedAt(); !ok {
		v := requestlog.DefaultCreatedAt()
		rlc.mutation.SetCreatedAt(v)
	}
	if _, ok := rlc.mutation.UpdatedAt(); !ok {
		v := requestlog.DefaultUpdatedAt()
		rlc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rlc *RequestLogCreate) check() error {
	if _, ok := rlc.mutation.ClaudeModel(); !ok {
		return &ValidationError{Name: "claude_model", err: errors.New(`ent: missing required field "RequestLog.claude_model"`)}
	}
	if _, ok := rlc.mutation.OpenaiModel(); !ok {
		return &ValidationError{Name: "openai_model", err: errors.New(`ent: missing required field "RequestLog.openai_model"`)}
	}
	if _, ok := rlc.mutation.RequestBody(); !ok {
		return &ValidationError{Name: "request_body", err: errors.New(`ent: missing required field "RequestLog.request_body"`)}
	}
	if _, ok := rlc.mutation.StatusCode(); !ok {
		return &ValidationError{Name: "status_code", err: errors.New(`ent: missing required field "RequestLog.status_code"`)}
	}
	if _, ok := rlc.mutation.IsStreaming(); !ok {
		return &ValidationError{Name: "is_streaming", err: errors.New(`ent: missing required field "RequestLog.is_streaming"`)}
	}
	if _, ok := rlc.mutation.InputTokens(); !ok {
		return &ValidationError{Name: "input_tokens", err: errors.New(`ent: missing required field "RequestLog.input_tokens"`)}
	}
	if _, ok := rlc.mutation.OutputTokens(); !ok {
		return &ValidationError{Name: "output_tokens", err: errors.New(`ent: missing required field "RequestLog.output_tokens"`)}
	}
	if _, ok := rlc.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "RequestLog.duration_ms"`)}
	}
	if _, ok := rlc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RequestLog.created_at"`)}
	}
	if _, ok := rlc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RequestLog.updated_at"`)}
	}
	return nil
}

func (rlc *RequestLogCreate) sqlSave(ctx context.Context) (*RequestLog, error) {
	if err := rlc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rlc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RequestLog.ID type: %T", _spec.ID.Value)
		}
	}
	rlc.mutation.id = &_node.ID
	rlc.mutation.done = true
	return _node, nil
}

func (rlc *RequestLogCreate) createSpec() (*RequestLog, *sqlgraph.CreateSpec) {
	var (
		_node = &RequestLog{config: rlc.config}
		_spec = sqlgraph.NewCreateSpec(requestlog.Table, sqlgraph.NewFieldSpec(requestlog.FieldID, field.TypeString))
	)
	if id, ok := rlc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rlc.mutation.ClaudeModel(); ok {
		_spec.SetField(requestlog.FieldClaudeModel, field.TypeString, value)
		_node.ClaudeModel = value
	}
	if value, ok := rlc.mutation.OpenaiModel(); ok {
		_spec.SetField(requestlog.FieldOpenaiModel, field.TypeString, value)
		_node.OpenaiModel = value
	}
	if value, ok := rlc.mutation.RequestBody(); ok {
		_spec.SetField(requestlog.FieldRequestBody, field.TypeString, value)
		_node.RequestBody = value
	}
	if value, ok := rlc.mutation.ResponseBody(); ok {
		_spec.SetField(requestlog.FieldResponseBody, field.TypeString, value)
		_node.ResponseBody = value
	}
	if value, ok := rlc.mutation.StatusCode(); ok {
		_spec.SetField(requestlog.FieldStatusCode, field.TypeInt, value)
		_node.StatusCode = value
	}
	if value, ok := rlc.mutation.IsStreaming(); ok {
		_spec.SetField(requestlog.FieldIsStreaming, field.TypeBool, value)
		_node.IsStreaming = value
	}
	if value, ok := rlc.mutation.InputTokens(); ok {
		_spec.SetField(requestlog.FieldInputTokens, field.TypeInt, value)
		_node.InputTokens = value
	}
	if value, ok := rlc.mutation.OutputTokens(); ok {
		_spec.SetField(requestlog.FieldOutputTokens, field.TypeInt, value)
		_node.OutputTokens = value
	}
	if value, ok := rlc.mutation.DurationMs(); ok {
		_spec.SetField(requestlog.FieldDurationMs, field.TypeFloat64, value)
		_node.DurationMs = value
	}
	if value, ok := rlc.mutation.ErrorMessage(); ok {
		_spec.SetField(requestlog.FieldErrorMessage, field.TypeString, value)
		_node.ErrorMessage = value
	}
	if value, ok := rlc.mutation.CreatedAt(); ok {
		_spec.SetField(requestlog.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := rlc.mutation.UpdatedAt(); ok {
		_spec.SetField(requestlog.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// RequestLogCreateBulk is the builder for creating many RequestLog entities in bulk.
type RequestLogCreateBulk struct {
	config
	err      error
	builders []*RequestLogCreate
}

// Save creates the RequestLog entities in the database.
func (rlcb *RequestLogCreateBulk) Save(ctx context.Context) ([]*RequestLog, error) {
	if rlcb.err != nil {
		return nil, rlcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rlcb.builders))
	nodes := make([]*RequestLog, len(rlcb.builders))
	mutators := make([]Mutator, len(rlcb.builders))
	for i := range rlcb.builders {
		func(i int, root context.Context) {
			builder := rlcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RequestLogMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rlcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rlcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rlcb *RequestLogCreateBulk) SaveX(ctx context.Context) []*RequestLog {
	v, err := rlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rlcb *RequestLogCreateBulk) Exec(ctx context.Context) error {
	_, err := rlcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlcb *RequestLogCreateBulk) ExecX(ctx context.Context) {
	if err := rlcb.Exec(ctx); err != nil {
		panic(err)
	}
}
