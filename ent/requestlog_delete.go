// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/predicate"
	"ccany/ent/requestlog"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RequestLogDelete is the builder for deleting a RequestLog entity.
type RequestLogDelete struct {
	config
	hooks    []Hook
	mutation *RequestLogMutation
}

// Where appends a list predicates to the RequestLogDelete builder.
func (rld *RequestLogDelete) Where(ps ...predicate.RequestLog) *RequestLogDelete {
	rld.mutation.Where(ps...)
	return rld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (rld *RequestLogDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, rld.sqlExec, rld.mutation, rld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (rld *RequestLogDelete) ExecX(ctx context.Context) int {
	n, err := rld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (rld *RequestLogDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(requestlog.Table, sqlgraph.NewFieldSpec(requestlog.FieldID, field.TypeString))
	if ps := rld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, rld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	rld.mutation.done = true
	return affected, err
}

// RequestLogDeleteOne is the builder for deleting a single RequestLog entity.
type RequestLogDeleteOne struct {
	rld *RequestLogDelete
}

// Where appends a list predicates to the RequestLogDelete builder.
func (rldo *RequestLogDeleteOne) Where(ps ...predicate.RequestLog) *RequestLogDeleteOne {
	rldo.rld.mutation.Where(ps...)
	return rldo
}

// Exec executes the deletion query.
func (rldo *RequestLogDeleteOne) Exec(ctx context.Context) error {
	n, err := rldo.rld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{requestlog.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (rldo *RequestLogDeleteOne) ExecX(ctx context.Context) {
	if err := rldo.Exec(ctx); err != nil {
		panic(err)
	}
}
