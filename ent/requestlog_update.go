// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/predicate"
	"ccany/ent/requestlog"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RequestLogUpdate is the builder for updating RequestLog entities.
type RequestLogUpdate struct {
	config
	hooks    []Hook
	mutation *RequestLogMutation
}

// Where appends a list predicates to the RequestLogUpdate builder.
func (rlu *RequestLogUpdate) Where(ps ...predicate.RequestLog) *RequestLogUpdate {
	rlu.mutation.Where(ps...)
	return rlu
}

// SetClaudeModel sets the "claude_model" field.
func (rlu *RequestLogUpdate) SetClaudeModel(s string) *RequestLogUpdate {
	rlu.mutation.SetClaudeModel(s)
	return rlu
}

// SetNillableClaudeModel sets the "claude_model" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableClaudeModel(s *string) *RequestLogUpdate {
	if s != nil {
		rlu.SetClaudeModel(*s)
	}
	return rlu
}

// SetOpenaiModel sets the "openai_model" field.
func (rlu *RequestLogUpdate) SetOpenaiModel(s string) *RequestLogUpdate {
	rlu.mutation.SetOpenaiModel(s)
	return rlu
}

// SetNillableOpenaiModel sets the "openai_model" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableOpenaiModel(s *string) *RequestLogUpdate {
	if s != nil {
		rlu.SetOpenaiModel(*s)
	}
	return rlu
}

// SetRequestBody sets the "request_body" field.
func (rlu *RequestLogUpdate) SetRequestBody(s string) *RequestLogUpdate {
	rlu.mutation.SetRequestBody(s)
	return rlu
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableRequestBody(s *string) *RequestLogUpdate {
	if s != nil {
		rlu.SetRequestBody(*s)
	}
	return rlu
}

// SetResponseBody sets the "response_body" field.
func (rlu *RequestLogUpdate) SetResponseBody(s string) *RequestLogUpdate {
	rlu.mutation.SetResponseBody(s)
	return rlu
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableResponseBody(s *string) *RequestLogUpdate {
	if s != nil {
		rlu.SetResponseBody(*s)
	}
	return rlu
}

// ClearResponseBody clears the value of the "response_body" field.
func (rlu *RequestLogUpdate) ClearResponseBody() *RequestLogUpdate {
	rlu.mutation.ClearResponseBody()
	return rlu
}

// SetStatusCode sets the "status_code" field.
func (rlu *RequestLogUpdate) SetStatusCode(i int) *RequestLogUpdate {
	rlu.mutation.ResetStatusCode()
	rlu.mutation.SetStatusCode(i)
	return rlu
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableStatusCode(i *int) *RequestLogUpdate {
	if i != nil {
		rlu.SetStatusCode(*i)
	}
	return rlu
}

// AddStatusCode adds i to the "status_code" field.
func (rlu *RequestLogUpdate) AddStatusCode(i int) *RequestLogUpdate {
	rlu.mutation.AddStatusCode(i)
	return rlu
}

// SetIsStreaming sets the "is_streaming" field.
func (rlu *RequestLogUpdate) SetIsStreaming(b bool) *RequestLogUpdate {
	rlu.mutation.SetIsStreaming(b)
	return rlu
}

// SetNillableIsStreaming sets the "is_streaming" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableIsStreaming(b *bool) *RequestLogUpdate {
	if b != nil {
		rlu.SetIsStreaming(*b)
	}
	return rlu
}

// SetInputTokens sets the "input_tokens" field.
func (rlu *RequestLogUpdate) SetInputTokens(i int) *RequestLogUpdate {
	rlu.mutation.ResetInputTokens()
	rlu.mutation.SetInputTokens(i)
	return rlu
}

// SetNillableInputTokens sets the "input_tokens" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableInputTokens(i *int) *RequestLogUpdate {
	if i != nil {
		rlu.SetInputTokens(*i)
	}
	return rlu
}

// AddInputTokens adds i to the "input_tokens" field.
func (rlu *RequestLogUpdate) AddInputTokens(i int) *RequestLogUpdate {
	rlu.mutation.AddInputTokens(i)
	return rlu
}

// SetOutputTokens sets the "output_tokens" field.
func (rlu *RequestLogUpdate) SetOutputTokens(i int) *RequestLogUpdate {
	rlu.mutation.ResetOutputTokens()
	rlu.mutation.SetOutputTokens(i)
	return rlu
}

// SetNillableOutputTokens sets the "output_tokens" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableOutputTokens(i *int) *RequestLogUpdate {
	if i != nil {
		rlu.SetOutputTokens(*i)
	}
	return rlu
}

// AddOutputTokens adds i to the "output_tokens" field.
func (rlu *RequestLogUpdate) AddOutputTokens(i int) *RequestLogUpdate {
	rlu.mutation.AddOutputTokens(i)
	return rlu
}

// SetDurationMs sets the "duration_ms" field.
func (rlu *RequestLogUpdate) SetDurationMs(f float64) *RequestLogUpdate {
	rlu.mutation.ResetDurationMs()
	rlu.mutation.SetDurationMs(f)
	return rlu
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableDurationMs(f *float64) *RequestLogUpdate {
	if f != nil {
		rlu.SetDurationMs(*f)
	}
	return rlu
}

// AddDurationMs adds f to the "duration_ms" field.
func (rlu *RequestLogUpdate) AddDurationMs(f float64) *RequestLogUpdate {
	rlu.mutation.AddDurationMs(f)
	return rlu
}

// SetErrorMessage sets the "error_message" field.
func (rlu *RequestLogUpdate) SetErrorMessage(s string) *RequestLogUpdate {
	rlu.mutation.SetErrorMessage(s)
	return rlu
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rlu *RequestLogUpdate) SetNillableErrorMessage(s *string) *RequestLogUpdate {
	if s != nil {
		rlu.SetErrorMessage(*s)
	}
	return rlu
}

// ClearErrorMessage clears the value of the "error_message" field.
func (rlu *RequestLogUpdate) ClearErrorMessage() *RequestLogUpdate {
	rlu.mutation.ClearErrorMessage()
	return rlu
}

// SetUpdatedAt sets the "updated_at" field.
func (rlu *RequestLogUpdate) SetUpdatedAt(t time.Time) *RequestLogUpdate {
	rlu.mutation.SetUpdatedAt(t)
	return rlu
}

// Mutation returns the RequestLogMutation object of the builder.
func (rlu *RequestLogUpdate) Mutation() *RequestLogMutation {
	return rlu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rlu *RequestLogUpdate) Save(ctx context.Context) (int, error) {
	rlu.defaults()
	return withHooks(ctx, rlu.sqlSave, rlu.mutation, rlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rlu *RequestLogUpdate) SaveX(ctx context.Context) int {
	affected, err := rlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rlu *RequestLogUpdate) Exec(ctx context.Context) error {
	_, err := rlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rlu *RequestLogUpdate) ExecX(ctx context.Context) {
	if err := rlu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rlu *RequestLogUpdate) defaults() {
	if _, ok := rlu.mutation.UpdatedAt(); !ok {
		v := requestlog.UpdateDefaultUpdatedAt()
		rlu.mutation.SetUpdatedAt(v)
	}
}

func (rlu *RequestLogUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(requestlog.Table, requestlog.Columns, sqlgraph.NewFieldSpec(requestlog.FieldID, field.TypeString))
	if ps := rlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rlu.mutation.ClaudeModel(); ok {
		_spec.SetField(requestlog.FieldClaudeModel, field.TypeString, value)
	}
	if value, ok := rlu.mutation.OpenaiModel(); ok {
		_spec.SetField(requestlog.FieldOpenaiModel, field.TypeString, value)
	}
	if value, ok := rlu.mutation.RequestBody(); ok {
		_spec.SetField(requestlog.FieldRequestBody, field.TypeString, value)
	}
	if value, ok := rlu.mutation.ResponseBody(); ok {
		_spec.SetField(requestlog.FieldResponseBody, field.TypeString, value)
	}
	if rlu.mutation.ResponseBodyCleared() {
		_spec.ClearField(requestlog.FieldResponseBody, field.TypeString)
	}
	if value, ok := rlu.mutation.StatusCode(); ok {
		_spec.SetField(requestlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.AddedStatusCode(); ok {
		_spec.AddField(requestlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.IsStreaming(); ok {
		_spec.SetField(requestlog.FieldIsStreaming, field.TypeBool, value)
	}
	if value, ok := rlu.mutation.InputTokens(); ok {
		_spec.SetField(requestlog.FieldInputTokens, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.AddedInputTokens(); ok {
		_spec.AddField(requestlog.FieldInputTokens, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.OutputTokens(); ok {
		_spec.SetField(requestlog.FieldOutputTokens, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.AddedOutputTokens(); ok {
		_spec.AddField(requestlog.FieldOutputTokens, field.TypeInt, value)
	}
	if value, ok := rlu.mutation.DurationMs(); ok {
		_spec.SetField(requestlog.FieldDurationMs, field.TypeFloat64, value)
	}
	if value, ok := rlu.mutation.AddedDurationMs(); ok {
		_spec.AddField(requestlog.FieldDurationMs, field.TypeFloat64, value)
	}
	if value, ok := rlu.mutation.ErrorMessage(); ok {
		_spec.SetField(requestlog.FieldErrorMessage, field.TypeString, value)
	}
	if rlu.mutation.ErrorMessageCleared() {
		_spec.ClearField(requestlog.FieldErrorMessage, field.TypeString)
	}
	if value, ok := rlu.mutation.UpdatedAt(); ok {
		_spec.SetField(requestlog.FieldUpdatedAt, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, rlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rlu.mutation.done = true
	return n, nil
}

// RequestLogUpdateOne is the builder for updating a single RequestLog entity.
type RequestLogUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RequestLogMutation
}

// SetClaudeModel sets the "claude_model" field.
func (rluo *RequestLogUpdateOne) SetClaudeModel(s string) *RequestLogUpdateOne {
	rluo.mutation.SetClaudeModel(s)
	return rluo
}

// SetNillableClaudeModel sets the "claude_model" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableClaudeModel(s *string) *RequestLogUpdateOne {
	if s != nil {
		rluo.SetClaudeModel(*s)
	}
	return rluo
}

// SetOpenaiModel sets the "openai_model" field.
func (rluo *RequestLogUpdateOne) SetOpenaiModel(s string) *RequestLogUpdateOne {
	rluo.mutation.SetOpenaiModel(s)
	return rluo
}

// SetNillableOpenaiModel sets the "openai_model" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableOpenaiModel(s *string) *RequestLogUpdateOne {
	if s != nil {
		rluo.SetOpenaiModel(*s)
	}
	return rluo
}

// SetRequestBody sets the "request_body" field.
func (rluo *RequestLogUpdateOne) SetRequestBody(s string) *RequestLogUpdateOne {
	rluo.mutation.SetRequestBody(s)
	return rluo
}

// SetNillableRequestBody sets the "request_body" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableRequestBody(s *string) *RequestLogUpdateOne {
	if s != nil {
		rluo.SetRequestBody(*s)
	}
	return rluo
}

// SetResponseBody sets the "response_body" field.
func (rluo *RequestLogUpdateOne) SetResponseBody(s string) *RequestLogUpdateOne {
	rluo.mutation.SetResponseBody(s)
	return rluo
}

// SetNillableResponseBody sets the "response_body" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableResponseBody(s *string) *RequestLogUpdateOne {
	if s != nil {
		rluo.SetResponseBody(*s)
	}
	return rluo
}

// ClearResponseBody clears the value of the "response_body" field.
func (rluo *RequestLogUpdateOne) ClearResponseBody() *RequestLogUpdateOne {
	rluo.mutation.ClearResponseBody()
	return rluo
}

// SetStatusCode sets the "status_code" field.
func (rluo *RequestLogUpdateOne) SetStatusCode(i int) *RequestLogUpdateOne {
	rluo.mutation.ResetStatusCode()
	rluo.mutation.SetStatusCode(i)
	return rluo
}

// SetNillableStatusCode sets the "status_code" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableStatusCode(i *int) *RequestLogUpdateOne {
	if i != nil {
		rluo.SetStatusCode(*i)
	}
	return rluo
}

// AddStatusCode adds i to the "status_code" field.
func (rluo *RequestLogUpdateOne) AddStatusCode(i int) *RequestLogUpdateOne {
	rluo.mutation.AddStatusCode(i)
	return rluo
}

// SetIsStreaming sets the "is_streaming" field.
func (rluo *RequestLogUpdateOne) SetIsStreaming(b bool) *RequestLogUpdateOne {
	rluo.mutation.SetIsStreaming(b)
	return rluo
}

// SetNillableIsStreaming sets the "is_streaming" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableIsStreaming(b *bool) *RequestLogUpdateOne {
	if b != nil {
		rluo.SetIsStreaming(*b)
	}
	return rluo
}

// SetInputTokens sets the "input_tokens" field.
func (rluo *RequestLogUpdateOne) SetInputTokens(i int) *RequestLogUpdateOne {
	rluo.mutation.ResetInputTokens()
	rluo.mutation.SetInputTokens(i)
	return rluo
}

// SetNillableInputTokens sets the "input_tokens" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableInputTokens(i *int) *RequestLogUpdateOne {
	if i != nil {
		rluo.SetInputTokens(*i)
	}
	return rluo
}

// AddInputTokens adds i to the "input_tokens" field.
func (rluo *RequestLogUpdateOne) AddInputTokens(i int) *RequestLogUpdateOne {
	rluo.mutation.AddInputTokens(i)
	return rluo
}

// SetOutputTokens sets the "output_tokens" field.
func (rluo *RequestLogUpdateOne) SetOutputTokens(i int) *RequestLogUpdateOne {
	rluo.mutation.ResetOutputTokens()
	rluo.mutation.SetOutputTokens(i)
	return rluo
}

// SetNillableOutputTokens sets the "output_tokens" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableOutputTokens(i *int) *RequestLogUpdateOne {
	if i != nil {
		rluo.SetOutputTokens(*i)
	}
	return rluo
}

// AddOutputTokens adds i to the "output_tokens" field.
func (rluo *RequestLogUpdateOne) AddOutputTokens(i int) *RequestLogUpdateOne {
	rluo.mutation.AddOutputTokens(i)
	return rluo
}

// SetDurationMs sets the "duration_ms" field.
func (rluo *RequestLogUpdateOne) SetDurationMs(f float64) *RequestLogUpdateOne {
	rluo.mutation.ResetDurationMs()
	rluo.mutation.SetDurationMs(f)
	return rluo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableDurationMs(f *float64) *RequestLogUpdateOne {
	if f != nil {
		rluo.SetDurationMs(*f)
	}
	return rluo
}

// AddDurationMs adds f to the "duration_ms" field.
func (rluo *RequestLogUpdateOne) AddDurationMs(f float64) *RequestLogUpdateOne {
	rluo.mutation.AddDurationMs(f)
	return rluo
}

// SetErrorMessage sets the "error_message" field.
func (rluo *RequestLogUpdateOne) SetErrorMessage(s string) *RequestLogUpdateOne {
	rluo.mutation.SetErrorMessage(s)
	return rluo
}

// SetNillableErrorMessage sets the "error_message" field if the given value is not nil.
func (rluo *RequestLogUpdateOne) SetNillableErrorMessage(s *string) *RequestLogUpdateOne {
	if s != nil {
		rluo.SetErrorMessage(*s)
	}
	return rluo
}

// ClearErrorMessage clears the value of the "error_message" field.
func (rluo *RequestLogUpdateOne) ClearErrorMessage() *RequestLogUpdateOne {
	rluo.mutation.ClearErrorMessage()
	return rluo
}

// SetUpdatedAt sets the "updated_at" field.
func (rluo *RequestLogUpdateOne) SetUpdatedAt(t time.Time) *RequestLogUpdateOne {
	rluo.mutation.SetUpdatedAt(t)
	return rluo
}

// Mutation returns the RequestLogMutation object of the builder.
func (rluo *RequestLogUpdateOne) Mutation() *RequestLogMutation {
	return rluo.mutation
}

// Where appends a list predicates to the RequestLogUpdate builder.
func (rluo *RequestLogUpdateOne) Where(ps ...predicate.RequestLog) *RequestLogUpdateOne {
	rluo.mutation.Where(ps...)
	return rluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rluo *RequestLogUpdateOne) Select(field string, fields ...string) *RequestLogUpdateOne {
	rluo.fields = append([]string{field}, fields...)
	return rluo
}

// Save executes the query and returns the updated RequestLog entity.
func (rluo *RequestLogUpdateOne) Save(ctx context.Context) (*RequestLog, error) {
	rluo.defaults()
	return withHooks(ctx, rluo.sqlSave, rluo.mutation, rluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rluo *RequestLogUpdateOne) SaveX(ctx context.Context) *RequestLog {
	node, err := rluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rluo *RequestLogUpdateOne) Exec(ctx context.Context) error {
	_, err := rluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rluo *RequestLogUpdateOne) ExecX(ctx context.Context) {
	if err := rluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rluo *RequestLogUpdateOne) defaults() {
	if _, ok := rluo.mutation.UpdatedAt(); !ok {
		v := requestlog.UpdateDefaultUpdatedAt()
		rluo.mutation.SetUpdatedAt(v)
	}
}

func (rluo *RequestLogUpdateOne) sqlSave(ctx context.Context) (_node *RequestLog, err error) {
	_spec := sqlgraph.NewUpdateSpec(requestlog.Table, requestlog.Columns, sqlgraph.NewFieldSpec(requestlog.FieldID, field.TypeString))
	id, ok := rluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RequestLog.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, requestlog.FieldID)
		for _, f := range fields {
			if !requestlog.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != requestlog.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rluo.mutation.ClaudeModel(); ok {
		_spec.SetField(requestlog.FieldClaudeModel, field.TypeString, value)
	}
	if value, ok := rluo.mutation.OpenaiModel(); ok {
		_spec.SetField(requestlog.FieldOpenaiModel, field.TypeString, value)
	}
	if value, ok := rluo.mutation.RequestBody(); ok {
		_spec.SetField(requestlog.FieldRequestBody, field.TypeString, value)
	}
	if value, ok := rluo.mutation.ResponseBody(); ok {
		_spec.SetField(requestlog.FieldResponseBody, field.TypeString, value)
	}
	if rluo.mutation.ResponseBodyCleared() {
		_spec.ClearField(requestlog.FieldResponseBody, field.TypeString)
	}
	if value, ok := rluo.mutation.StatusCode(); ok {
		_spec.SetField(requestlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.AddedStatusCode(); ok {
		_spec.AddField(requestlog.FieldStatusCode, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.IsStreaming(); ok {
		_spec.SetField(requestlog.FieldIsStreaming, field.TypeBool, value)
	}
	if value, ok := rluo.mutation.InputTokens(); ok {
		_spec.SetField(requestlog.FieldInputTokens, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.AddedInputTokens(); ok {
		_spec.AddField(requestlog.FieldInputTokens, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.OutputTokens(); ok {
		_spec.SetField(requestlog.FieldOutputTokens, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.AddedOutputTokens(); ok {
		_spec.AddField(requestlog.FieldOutputTokens, field.TypeInt, value)
	}
	if value, ok := rluo.mutation.DurationMs(); ok {
		_spec.SetField(requestlog.FieldDurationMs, field.TypeFloat64, value)
	}
	if value, ok := rluo.mutation.AddedDurationMs(); ok {
		_spec.AddField(requestlog.FieldDurationMs, field.TypeFloat64, value)
	}
	if value, ok := rluo.mutation.ErrorMessage(); ok {
		_spec.SetField(requestlog.FieldErrorMessage, field.TypeString, value)
	}
	if rluo.mutation.ErrorMessageCleared() {
		_spec.ClearField(requestlog.FieldErrorMessage, field.TypeString)
	}
	if value, ok := rluo.mutation.UpdatedAt(); ok {
		_spec.SetField(requestlog.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &RequestLog{config: rluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{requestlog.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rluo.mutation.done = true
	return _node, nil
}
