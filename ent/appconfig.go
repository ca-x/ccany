// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/appconfig"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AppConfig is the model entity for the AppConfig schema.
type AppConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Configuration key name
	Key string `json:"key,omitempty"`
	// Configuration value
	Value string `json:"value,omitempty"`
	// Configuration category: api, model, server, performance
	Category string `json:"category,omitempty"`
	// Value type: string, int, bool, json
	Type string `json:"type,omitempty"`
	// Configuration description
	Description string `json:"description,omitempty"`
	// Whether to encrypt storage
	IsEncrypted bool `json:"is_encrypted,omitempty"`
	// Whether required
	IsRequired bool `json:"is_required,omitempty"`
	// Default value
	DefaultValue string `json:"default_value,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appconfig.FieldIsEncrypted, appconfig.FieldIsRequired:
			values[i] = new(sql.NullBool)
		case appconfig.FieldID, appconfig.FieldKey, appconfig.FieldValue, appconfig.FieldCategory, appconfig.FieldType, appconfig.FieldDescription, appconfig.FieldDefaultValue:
			values[i] = new(sql.NullString)
		case appconfig.FieldCreatedAt, appconfig.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppConfig fields.
func (ac *AppConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appconfig.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ac.ID = value.String
			}
		case appconfig.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				ac.Key = value.String
			}
		case appconfig.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				ac.Value = value.String
			}
		case appconfig.FieldCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category", values[i])
			} else if value.Valid {
				ac.Category = value.String
			}
		case appconfig.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ac.Type = value.String
			}
		case appconfig.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ac.Description = value.String
			}
		case appconfig.FieldIsEncrypted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_encrypted", values[i])
			} else if value.Valid {
				ac.IsEncrypted = value.Bool
			}
		case appconfig.FieldIsRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_required", values[i])
			} else if value.Valid {
				ac.IsRequired = value.Bool
			}
		case appconfig.FieldDefaultValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_value", values[i])
			} else if value.Valid {
				ac.DefaultValue = value.String
			}
		case appconfig.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ac.CreatedAt = value.Time
			}
		case appconfig.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ac.UpdatedAt = value.Time
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// GetValue returns the ent.Value that was dynamically selected and assigned to the AppConfig.
// This includes values selected through modifiers, order, etc.
func (ac *AppConfig) GetValue(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// Update returns a builder for updating this AppConfig.
// Note that you need to call AppConfig.Unwrap() before calling this method if this AppConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AppConfig) Update() *AppConfigUpdateOne {
	return NewAppConfigClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AppConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AppConfig) Unwrap() *AppConfig {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppConfig is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AppConfig) String() string {
	var builder strings.Builder
	builder.WriteString("AppConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("key=")
	builder.WriteString(ac.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(ac.Value)
	builder.WriteString(", ")
	builder.WriteString("category=")
	builder.WriteString(ac.Category)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ac.Type)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ac.Description)
	builder.WriteString(", ")
	builder.WriteString("is_encrypted=")
	builder.WriteString(fmt.Sprintf("%v", ac.IsEncrypted))
	builder.WriteString(", ")
	builder.WriteString("is_required=")
	builder.WriteString(fmt.Sprintf("%v", ac.IsRequired))
	builder.WriteString(", ")
	builder.WriteString("default_value=")
	builder.WriteString(ac.DefaultValue)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ac.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ac.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// AppConfigs is a parsable slice of AppConfig.
type AppConfigs []*AppConfig
