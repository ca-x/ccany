// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/requestlog"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RequestLog is the model entity for the RequestLog schema.
type RequestLog struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Original Claude model requested
	ClaudeModel string `json:"claude_model,omitempty"`
	// Mapped OpenAI model used
	OpenaiModel string `json:"openai_model,omitempty"`
	// Original Claude request body
	RequestBody string `json:"request_body,omitempty"`
	// Response body
	ResponseBody string `json:"response_body,omitempty"`
	// HTTP status code
	StatusCode int `json:"status_code,omitempty"`
	// Whether request was streaming
	IsStreaming bool `json:"is_streaming,omitempty"`
	// Number of input tokens
	InputTokens int `json:"input_tokens,omitempty"`
	// Number of output tokens
	OutputTokens int `json:"output_tokens,omitempty"`
	// Request duration in milliseconds
	DurationMs float64 `json:"duration_ms,omitempty"`
	// Error message if request failed
	ErrorMessage string `json:"error_message,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RequestLog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case requestlog.FieldIsStreaming:
			values[i] = new(sql.NullBool)
		case requestlog.FieldDurationMs:
			values[i] = new(sql.NullFloat64)
		case requestlog.FieldStatusCode, requestlog.FieldInputTokens, requestlog.FieldOutputTokens:
			values[i] = new(sql.NullInt64)
		case requestlog.FieldID, requestlog.FieldClaudeModel, requestlog.FieldOpenaiModel, requestlog.FieldRequestBody, requestlog.FieldResponseBody, requestlog.FieldErrorMessage:
			values[i] = new(sql.NullString)
		case requestlog.FieldCreatedAt, requestlog.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RequestLog fields.
func (rl *RequestLog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case requestlog.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				rl.ID = value.String
			}
		case requestlog.FieldClaudeModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claude_model", values[i])
			} else if value.Valid {
				rl.ClaudeModel = value.String
			}
		case requestlog.FieldOpenaiModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field openai_model", values[i])
			} else if value.Valid {
				rl.OpenaiModel = value.String
			}
		case requestlog.FieldRequestBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field request_body", values[i])
			} else if value.Valid {
				rl.RequestBody = value.String
			}
		case requestlog.FieldResponseBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field response_body", values[i])
			} else if value.Valid {
				rl.ResponseBody = value.String
			}
		case requestlog.FieldStatusCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status_code", values[i])
			} else if value.Valid {
				rl.StatusCode = int(value.Int64)
			}
		case requestlog.FieldIsStreaming:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_streaming", values[i])
			} else if value.Valid {
				rl.IsStreaming = value.Bool
			}
		case requestlog.FieldInputTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field input_tokens", values[i])
			} else if value.Valid {
				rl.InputTokens = int(value.Int64)
			}
		case requestlog.FieldOutputTokens:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field output_tokens", values[i])
			} else if value.Valid {
				rl.OutputTokens = int(value.Int64)
			}
		case requestlog.FieldDurationMs:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				rl.DurationMs = value.Float64
			}
		case requestlog.FieldErrorMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_message", values[i])
			} else if value.Valid {
				rl.ErrorMessage = value.String
			}
		case requestlog.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rl.CreatedAt = value.Time
			}
		case requestlog.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rl.UpdatedAt = value.Time
			}
		default:
			rl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RequestLog.
// This includes values selected through modifiers, order, etc.
func (rl *RequestLog) Value(name string) (ent.Value, error) {
	return rl.selectValues.Get(name)
}

// Update returns a builder for updating this RequestLog.
// Note that you need to call RequestLog.Unwrap() before calling this method if this RequestLog
// was returned from a transaction, and the transaction was committed or rolled back.
func (rl *RequestLog) Update() *RequestLogUpdateOne {
	return NewRequestLogClient(rl.config).UpdateOne(rl)
}

// Unwrap unwraps the RequestLog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rl *RequestLog) Unwrap() *RequestLog {
	_tx, ok := rl.config.driver.(*txDriver)
	if !ok {
		panic("ent: RequestLog is not a transactional entity")
	}
	rl.config.driver = _tx.drv
	return rl
}

// String implements the fmt.Stringer.
func (rl *RequestLog) String() string {
	var builder strings.Builder
	builder.WriteString("RequestLog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rl.ID))
	builder.WriteString("claude_model=")
	builder.WriteString(rl.ClaudeModel)
	builder.WriteString(", ")
	builder.WriteString("openai_model=")
	builder.WriteString(rl.OpenaiModel)
	builder.WriteString(", ")
	builder.WriteString("request_body=")
	builder.WriteString(rl.RequestBody)
	builder.WriteString(", ")
	builder.WriteString("response_body=")
	builder.WriteString(rl.ResponseBody)
	builder.WriteString(", ")
	builder.WriteString("status_code=")
	builder.WriteString(fmt.Sprintf("%v", rl.StatusCode))
	builder.WriteString(", ")
	builder.WriteString("is_streaming=")
	builder.WriteString(fmt.Sprintf("%v", rl.IsStreaming))
	builder.WriteString(", ")
	builder.WriteString("input_tokens=")
	builder.WriteString(fmt.Sprintf("%v", rl.InputTokens))
	builder.WriteString(", ")
	builder.WriteString("output_tokens=")
	builder.WriteString(fmt.Sprintf("%v", rl.OutputTokens))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", rl.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("error_message=")
	builder.WriteString(rl.ErrorMessage)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(rl.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(rl.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RequestLogs is a parsable slice of RequestLog.
type RequestLogs []*RequestLog
