// Code generated by ent, DO NOT EDIT.

package ent

import (
	"ccany/ent/appconfig"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppConfigCreate is the builder for creating a AppConfig entity.
type AppConfigCreate struct {
	config
	mutation *AppConfigMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (acc *AppConfigCreate) SetKey(s string) *AppConfigCreate {
	acc.mutation.SetKey(s)
	return acc
}

// SetValue sets the "value" field.
func (acc *AppConfigCreate) SetValue(s string) *AppConfigCreate {
	acc.mutation.SetValue(s)
	return acc
}

// SetCategory sets the "category" field.
func (acc *AppConfigCreate) SetCategory(s string) *AppConfigCreate {
	acc.mutation.SetCategory(s)
	return acc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableCategory(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetCategory(*s)
	}
	return acc
}

// SetType sets the "type" field.
func (acc *AppConfigCreate) SetType(s string) *AppConfigCreate {
	acc.mutation.SetType(s)
	return acc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableType(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetType(*s)
	}
	return acc
}

// SetDescription sets the "description" field.
func (acc *AppConfigCreate) SetDescription(s string) *AppConfigCreate {
	acc.mutation.SetDescription(s)
	return acc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableDescription(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetDescription(*s)
	}
	return acc
}

// SetIsEncrypted sets the "is_encrypted" field.
func (acc *AppConfigCreate) SetIsEncrypted(b bool) *AppConfigCreate {
	acc.mutation.SetIsEncrypted(b)
	return acc
}

// SetNillableIsEncrypted sets the "is_encrypted" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableIsEncrypted(b *bool) *AppConfigCreate {
	if b != nil {
		acc.SetIsEncrypted(*b)
	}
	return acc
}

// SetIsRequired sets the "is_required" field.
func (acc *AppConfigCreate) SetIsRequired(b bool) *AppConfigCreate {
	acc.mutation.SetIsRequired(b)
	return acc
}

// SetNillableIsRequired sets the "is_required" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableIsRequired(b *bool) *AppConfigCreate {
	if b != nil {
		acc.SetIsRequired(*b)
	}
	return acc
}

// SetDefaultValue sets the "default_value" field.
func (acc *AppConfigCreate) SetDefaultValue(s string) *AppConfigCreate {
	acc.mutation.SetDefaultValue(s)
	return acc
}

// SetNillableDefaultValue sets the "default_value" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableDefaultValue(s *string) *AppConfigCreate {
	if s != nil {
		acc.SetDefaultValue(*s)
	}
	return acc
}

// SetCreatedAt sets the "created_at" field.
func (acc *AppConfigCreate) SetCreatedAt(t time.Time) *AppConfigCreate {
	acc.mutation.SetCreatedAt(t)
	return acc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableCreatedAt(t *time.Time) *AppConfigCreate {
	if t != nil {
		acc.SetCreatedAt(*t)
	}
	return acc
}

// SetUpdatedAt sets the "updated_at" field.
func (acc *AppConfigCreate) SetUpdatedAt(t time.Time) *AppConfigCreate {
	acc.mutation.SetUpdatedAt(t)
	return acc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (acc *AppConfigCreate) SetNillableUpdatedAt(t *time.Time) *AppConfigCreate {
	if t != nil {
		acc.SetUpdatedAt(*t)
	}
	return acc
}

// SetID sets the "id" field.
func (acc *AppConfigCreate) SetID(s string) *AppConfigCreate {
	acc.mutation.SetID(s)
	return acc
}

// Mutation returns the AppConfigMutation object of the builder.
func (acc *AppConfigCreate) Mutation() *AppConfigMutation {
	return acc.mutation
}

// Save creates the AppConfig in the database.
func (acc *AppConfigCreate) Save(ctx context.Context) (*AppConfig, error) {
	acc.defaults()
	return withHooks(ctx, acc.sqlSave, acc.mutation, acc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (acc *AppConfigCreate) SaveX(ctx context.Context) *AppConfig {
	v, err := acc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acc *AppConfigCreate) Exec(ctx context.Context) error {
	_, err := acc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acc *AppConfigCreate) ExecX(ctx context.Context) {
	if err := acc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (acc *AppConfigCreate) defaults() {
	if _, ok := acc.mutation.Category(); !ok {
		v := appconfig.DefaultCategory
		acc.mutation.SetCategory(v)
	}
	if _, ok := acc.mutation.GetType(); !ok {
		v := appconfig.DefaultType
		acc.mutation.SetType(v)
	}
	if _, ok := acc.mutation.IsEncrypted(); !ok {
		v := appconfig.DefaultIsEncrypted
		acc.mutation.SetIsEncrypted(v)
	}
	if _, ok := acc.mutation.IsRequired(); !ok {
		v := appconfig.DefaultIsRequired
		acc.mutation.SetIsRequired(v)
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		v := appconfig.DefaultCreatedAt()
		acc.mutation.SetCreatedAt(v)
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		v := appconfig.DefaultUpdatedAt()
		acc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (acc *AppConfigCreate) check() error {
	if _, ok := acc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "AppConfig.key"`)}
	}
	if _, ok := acc.mutation.Value(); !ok {
		return &ValidationError{Name: "value", err: errors.New(`ent: missing required field "AppConfig.value"`)}
	}
	if _, ok := acc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "AppConfig.category"`)}
	}
	if _, ok := acc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AppConfig.type"`)}
	}
	if _, ok := acc.mutation.IsEncrypted(); !ok {
		return &ValidationError{Name: "is_encrypted", err: errors.New(`ent: missing required field "AppConfig.is_encrypted"`)}
	}
	if _, ok := acc.mutation.IsRequired(); !ok {
		return &ValidationError{Name: "is_required", err: errors.New(`ent: missing required field "AppConfig.is_required"`)}
	}
	if _, ok := acc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "AppConfig.created_at"`)}
	}
	if _, ok := acc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "AppConfig.updated_at"`)}
	}
	return nil
}

func (acc *AppConfigCreate) sqlSave(ctx context.Context) (*AppConfig, error) {
	if err := acc.check(); err != nil {
		return nil, err
	}
	_node, _spec := acc.createSpec()
	if err := sqlgraph.CreateNode(ctx, acc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppConfig.ID type: %T", _spec.ID.Value)
		}
	}
	acc.mutation.id = &_node.ID
	acc.mutation.done = true
	return _node, nil
}

func (acc *AppConfigCreate) createSpec() (*AppConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AppConfig{config: acc.config}
		_spec = sqlgraph.NewCreateSpec(appconfig.Table, sqlgraph.NewFieldSpec(appconfig.FieldID, field.TypeString))
	)
	if id, ok := acc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := acc.mutation.Key(); ok {
		_spec.SetField(appconfig.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := acc.mutation.Value(); ok {
		_spec.SetField(appconfig.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	if value, ok := acc.mutation.Category(); ok {
		_spec.SetField(appconfig.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := acc.mutation.GetType(); ok {
		_spec.SetField(appconfig.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := acc.mutation.Description(); ok {
		_spec.SetField(appconfig.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := acc.mutation.IsEncrypted(); ok {
		_spec.SetField(appconfig.FieldIsEncrypted, field.TypeBool, value)
		_node.IsEncrypted = value
	}
	if value, ok := acc.mutation.IsRequired(); ok {
		_spec.SetField(appconfig.FieldIsRequired, field.TypeBool, value)
		_node.IsRequired = value
	}
	if value, ok := acc.mutation.DefaultValue(); ok {
		_spec.SetField(appconfig.FieldDefaultValue, field.TypeString, value)
		_node.DefaultValue = value
	}
	if value, ok := acc.mutation.CreatedAt(); ok {
		_spec.SetField(appconfig.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := acc.mutation.UpdatedAt(); ok {
		_spec.SetField(appconfig.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// AppConfigCreateBulk is the builder for creating many AppConfig entities in bulk.
type AppConfigCreateBulk struct {
	config
	err      error
	builders []*AppConfigCreate
}

// Save creates the AppConfig entities in the database.
func (accb *AppConfigCreateBulk) Save(ctx context.Context) ([]*AppConfig, error) {
	if accb.err != nil {
		return nil, accb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(accb.builders))
	nodes := make([]*AppConfig, len(accb.builders))
	mutators := make([]Mutator, len(accb.builders))
	for i := range accb.builders {
		func(i int, root context.Context) {
			builder := accb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, accb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, accb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, accb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (accb *AppConfigCreateBulk) SaveX(ctx context.Context) []*AppConfig {
	v, err := accb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (accb *AppConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := accb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (accb *AppConfigCreateBulk) ExecX(ctx context.Context) {
	if err := accb.Exec(ctx); err != nil {
		panic(err)
	}
}
