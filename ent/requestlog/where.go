// Code generated by ent, DO NOT EDIT.

package requestlog

import (
	"ccany/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContainsFold(FieldID, id))
}

// ClaudeModel applies equality check predicate on the "claude_model" field. It's identical to ClaudeModelEQ.
func ClaudeModel(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldClaudeModel, v))
}

// OpenaiModel applies equality check predicate on the "openai_model" field. It's identical to OpenaiModelEQ.
func OpenaiModel(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldOpenaiModel, v))
}

// RequestBody applies equality check predicate on the "request_body" field. It's identical to RequestBodyEQ.
func RequestBody(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldRequestBody, v))
}

// ResponseBody applies equality check predicate on the "response_body" field. It's identical to ResponseBodyEQ.
func ResponseBody(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldResponseBody, v))
}

// StatusCode applies equality check predicate on the "status_code" field. It's identical to StatusCodeEQ.
func StatusCode(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldStatusCode, v))
}

// IsStreaming applies equality check predicate on the "is_streaming" field. It's identical to IsStreamingEQ.
func IsStreaming(v bool) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldIsStreaming, v))
}

// InputTokens applies equality check predicate on the "input_tokens" field. It's identical to InputTokensEQ.
func InputTokens(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldInputTokens, v))
}

// OutputTokens applies equality check predicate on the "output_tokens" field. It's identical to OutputTokensEQ.
func OutputTokens(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldOutputTokens, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldDurationMs, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// ClaudeModelEQ applies the EQ predicate on the "claude_model" field.
func ClaudeModelEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldClaudeModel, v))
}

// ClaudeModelNEQ applies the NEQ predicate on the "claude_model" field.
func ClaudeModelNEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldClaudeModel, v))
}

// ClaudeModelIn applies the In predicate on the "claude_model" field.
func ClaudeModelIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldClaudeModel, vs...))
}

// ClaudeModelNotIn applies the NotIn predicate on the "claude_model" field.
func ClaudeModelNotIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldClaudeModel, vs...))
}

// ClaudeModelGT applies the GT predicate on the "claude_model" field.
func ClaudeModelGT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldClaudeModel, v))
}

// ClaudeModelGTE applies the GTE predicate on the "claude_model" field.
func ClaudeModelGTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldClaudeModel, v))
}

// ClaudeModelLT applies the LT predicate on the "claude_model" field.
func ClaudeModelLT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldClaudeModel, v))
}

// ClaudeModelLTE applies the LTE predicate on the "claude_model" field.
func ClaudeModelLTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldClaudeModel, v))
}

// ClaudeModelContains applies the Contains predicate on the "claude_model" field.
func ClaudeModelContains(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContains(FieldClaudeModel, v))
}

// ClaudeModelHasPrefix applies the HasPrefix predicate on the "claude_model" field.
func ClaudeModelHasPrefix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasPrefix(FieldClaudeModel, v))
}

// ClaudeModelHasSuffix applies the HasSuffix predicate on the "claude_model" field.
func ClaudeModelHasSuffix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasSuffix(FieldClaudeModel, v))
}

// ClaudeModelEqualFold applies the EqualFold predicate on the "claude_model" field.
func ClaudeModelEqualFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEqualFold(FieldClaudeModel, v))
}

// ClaudeModelContainsFold applies the ContainsFold predicate on the "claude_model" field.
func ClaudeModelContainsFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContainsFold(FieldClaudeModel, v))
}

// OpenaiModelEQ applies the EQ predicate on the "openai_model" field.
func OpenaiModelEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldOpenaiModel, v))
}

// OpenaiModelNEQ applies the NEQ predicate on the "openai_model" field.
func OpenaiModelNEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldOpenaiModel, v))
}

// OpenaiModelIn applies the In predicate on the "openai_model" field.
func OpenaiModelIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldOpenaiModel, vs...))
}

// OpenaiModelNotIn applies the NotIn predicate on the "openai_model" field.
func OpenaiModelNotIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldOpenaiModel, vs...))
}

// OpenaiModelGT applies the GT predicate on the "openai_model" field.
func OpenaiModelGT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldOpenaiModel, v))
}

// OpenaiModelGTE applies the GTE predicate on the "openai_model" field.
func OpenaiModelGTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldOpenaiModel, v))
}

// OpenaiModelLT applies the LT predicate on the "openai_model" field.
func OpenaiModelLT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldOpenaiModel, v))
}

// OpenaiModelLTE applies the LTE predicate on the "openai_model" field.
func OpenaiModelLTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldOpenaiModel, v))
}

// OpenaiModelContains applies the Contains predicate on the "openai_model" field.
func OpenaiModelContains(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContains(FieldOpenaiModel, v))
}

// OpenaiModelHasPrefix applies the HasPrefix predicate on the "openai_model" field.
func OpenaiModelHasPrefix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasPrefix(FieldOpenaiModel, v))
}

// OpenaiModelHasSuffix applies the HasSuffix predicate on the "openai_model" field.
func OpenaiModelHasSuffix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasSuffix(FieldOpenaiModel, v))
}

// OpenaiModelEqualFold applies the EqualFold predicate on the "openai_model" field.
func OpenaiModelEqualFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEqualFold(FieldOpenaiModel, v))
}

// OpenaiModelContainsFold applies the ContainsFold predicate on the "openai_model" field.
func OpenaiModelContainsFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContainsFold(FieldOpenaiModel, v))
}

// RequestBodyEQ applies the EQ predicate on the "request_body" field.
func RequestBodyEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldRequestBody, v))
}

// RequestBodyNEQ applies the NEQ predicate on the "request_body" field.
func RequestBodyNEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldRequestBody, v))
}

// RequestBodyIn applies the In predicate on the "request_body" field.
func RequestBodyIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldRequestBody, vs...))
}

// RequestBodyNotIn applies the NotIn predicate on the "request_body" field.
func RequestBodyNotIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldRequestBody, vs...))
}

// RequestBodyGT applies the GT predicate on the "request_body" field.
func RequestBodyGT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldRequestBody, v))
}

// RequestBodyGTE applies the GTE predicate on the "request_body" field.
func RequestBodyGTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldRequestBody, v))
}

// RequestBodyLT applies the LT predicate on the "request_body" field.
func RequestBodyLT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldRequestBody, v))
}

// RequestBodyLTE applies the LTE predicate on the "request_body" field.
func RequestBodyLTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldRequestBody, v))
}

// RequestBodyContains applies the Contains predicate on the "request_body" field.
func RequestBodyContains(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContains(FieldRequestBody, v))
}

// RequestBodyHasPrefix applies the HasPrefix predicate on the "request_body" field.
func RequestBodyHasPrefix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasPrefix(FieldRequestBody, v))
}

// RequestBodyHasSuffix applies the HasSuffix predicate on the "request_body" field.
func RequestBodyHasSuffix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasSuffix(FieldRequestBody, v))
}

// RequestBodyEqualFold applies the EqualFold predicate on the "request_body" field.
func RequestBodyEqualFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEqualFold(FieldRequestBody, v))
}

// RequestBodyContainsFold applies the ContainsFold predicate on the "request_body" field.
func RequestBodyContainsFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContainsFold(FieldRequestBody, v))
}

// ResponseBodyEQ applies the EQ predicate on the "response_body" field.
func ResponseBodyEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldResponseBody, v))
}

// ResponseBodyNEQ applies the NEQ predicate on the "response_body" field.
func ResponseBodyNEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldResponseBody, v))
}

// ResponseBodyIn applies the In predicate on the "response_body" field.
func ResponseBodyIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldResponseBody, vs...))
}

// ResponseBodyNotIn applies the NotIn predicate on the "response_body" field.
func ResponseBodyNotIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldResponseBody, vs...))
}

// ResponseBodyGT applies the GT predicate on the "response_body" field.
func ResponseBodyGT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldResponseBody, v))
}

// ResponseBodyGTE applies the GTE predicate on the "response_body" field.
func ResponseBodyGTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldResponseBody, v))
}

// ResponseBodyLT applies the LT predicate on the "response_body" field.
func ResponseBodyLT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldResponseBody, v))
}

// ResponseBodyLTE applies the LTE predicate on the "response_body" field.
func ResponseBodyLTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldResponseBody, v))
}

// ResponseBodyContains applies the Contains predicate on the "response_body" field.
func ResponseBodyContains(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContains(FieldResponseBody, v))
}

// ResponseBodyHasPrefix applies the HasPrefix predicate on the "response_body" field.
func ResponseBodyHasPrefix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasPrefix(FieldResponseBody, v))
}

// ResponseBodyHasSuffix applies the HasSuffix predicate on the "response_body" field.
func ResponseBodyHasSuffix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasSuffix(FieldResponseBody, v))
}

// ResponseBodyIsNil applies the IsNil predicate on the "response_body" field.
func ResponseBodyIsNil() predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIsNull(FieldResponseBody))
}

// ResponseBodyNotNil applies the NotNil predicate on the "response_body" field.
func ResponseBodyNotNil() predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotNull(FieldResponseBody))
}

// ResponseBodyEqualFold applies the EqualFold predicate on the "response_body" field.
func ResponseBodyEqualFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEqualFold(FieldResponseBody, v))
}

// ResponseBodyContainsFold applies the ContainsFold predicate on the "response_body" field.
func ResponseBodyContainsFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContainsFold(FieldResponseBody, v))
}

// StatusCodeEQ applies the EQ predicate on the "status_code" field.
func StatusCodeEQ(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldStatusCode, v))
}

// StatusCodeNEQ applies the NEQ predicate on the "status_code" field.
func StatusCodeNEQ(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldStatusCode, v))
}

// StatusCodeIn applies the In predicate on the "status_code" field.
func StatusCodeIn(vs ...int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldStatusCode, vs...))
}

// StatusCodeNotIn applies the NotIn predicate on the "status_code" field.
func StatusCodeNotIn(vs ...int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldStatusCode, vs...))
}

// StatusCodeGT applies the GT predicate on the "status_code" field.
func StatusCodeGT(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldStatusCode, v))
}

// StatusCodeGTE applies the GTE predicate on the "status_code" field.
func StatusCodeGTE(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldStatusCode, v))
}

// StatusCodeLT applies the LT predicate on the "status_code" field.
func StatusCodeLT(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldStatusCode, v))
}

// StatusCodeLTE applies the LTE predicate on the "status_code" field.
func StatusCodeLTE(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldStatusCode, v))
}

// IsStreamingEQ applies the EQ predicate on the "is_streaming" field.
func IsStreamingEQ(v bool) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldIsStreaming, v))
}

// IsStreamingNEQ applies the NEQ predicate on the "is_streaming" field.
func IsStreamingNEQ(v bool) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldIsStreaming, v))
}

// InputTokensEQ applies the EQ predicate on the "input_tokens" field.
func InputTokensEQ(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldInputTokens, v))
}

// InputTokensNEQ applies the NEQ predicate on the "input_tokens" field.
func InputTokensNEQ(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldInputTokens, v))
}

// InputTokensIn applies the In predicate on the "input_tokens" field.
func InputTokensIn(vs ...int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldInputTokens, vs...))
}

// InputTokensNotIn applies the NotIn predicate on the "input_tokens" field.
func InputTokensNotIn(vs ...int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldInputTokens, vs...))
}

// InputTokensGT applies the GT predicate on the "input_tokens" field.
func InputTokensGT(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldInputTokens, v))
}

// InputTokensGTE applies the GTE predicate on the "input_tokens" field.
func InputTokensGTE(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldInputTokens, v))
}

// InputTokensLT applies the LT predicate on the "input_tokens" field.
func InputTokensLT(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldInputTokens, v))
}

// InputTokensLTE applies the LTE predicate on the "input_tokens" field.
func InputTokensLTE(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldInputTokens, v))
}

// OutputTokensEQ applies the EQ predicate on the "output_tokens" field.
func OutputTokensEQ(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldOutputTokens, v))
}

// OutputTokensNEQ applies the NEQ predicate on the "output_tokens" field.
func OutputTokensNEQ(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldOutputTokens, v))
}

// OutputTokensIn applies the In predicate on the "output_tokens" field.
func OutputTokensIn(vs ...int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldOutputTokens, vs...))
}

// OutputTokensNotIn applies the NotIn predicate on the "output_tokens" field.
func OutputTokensNotIn(vs ...int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldOutputTokens, vs...))
}

// OutputTokensGT applies the GT predicate on the "output_tokens" field.
func OutputTokensGT(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldOutputTokens, v))
}

// OutputTokensGTE applies the GTE predicate on the "output_tokens" field.
func OutputTokensGTE(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldOutputTokens, v))
}

// OutputTokensLT applies the LT predicate on the "output_tokens" field.
func OutputTokensLT(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldOutputTokens, v))
}

// OutputTokensLTE applies the LTE predicate on the "output_tokens" field.
func OutputTokensLTE(v int) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldOutputTokens, v))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v float64) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldDurationMs, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldContainsFold(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.RequestLog {
	return predicate.RequestLog(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.RequestLog) predicate.RequestLog {
	return predicate.RequestLog(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.RequestLog) predicate.RequestLog {
	return predicate.RequestLog(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.RequestLog) predicate.RequestLog {
	return predicate.RequestLog(sql.NotPredicates(p))
}
