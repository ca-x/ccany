// Code generated by ent, DO NOT EDIT.

package requestlog

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the requestlog type in the database.
	Label = "request_log"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldClaudeModel holds the string denoting the claude_model field in the database.
	FieldClaudeModel = "claude_model"
	// FieldOpenaiModel holds the string denoting the openai_model field in the database.
	FieldOpenaiModel = "openai_model"
	// FieldRequestBody holds the string denoting the request_body field in the database.
	FieldRequestBody = "request_body"
	// FieldResponseBody holds the string denoting the response_body field in the database.
	FieldResponseBody = "response_body"
	// FieldStatusCode holds the string denoting the status_code field in the database.
	FieldStatusCode = "status_code"
	// FieldIsStreaming holds the string denoting the is_streaming field in the database.
	FieldIsStreaming = "is_streaming"
	// FieldInputTokens holds the string denoting the input_tokens field in the database.
	FieldInputTokens = "input_tokens"
	// FieldOutputTokens holds the string denoting the output_tokens field in the database.
	FieldOutputTokens = "output_tokens"
	// FieldDurationMs holds the string denoting the duration_ms field in the database.
	FieldDurationMs = "duration_ms"
	// FieldErrorMessage holds the string denoting the error_message field in the database.
	FieldErrorMessage = "error_message"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the requestlog in the database.
	Table = "request_logs"
)

// Columns holds all SQL columns for requestlog fields.
var Columns = []string{
	FieldID,
	FieldClaudeModel,
	FieldOpenaiModel,
	FieldRequestBody,
	FieldResponseBody,
	FieldStatusCode,
	FieldIsStreaming,
	FieldInputTokens,
	FieldOutputTokens,
	FieldDurationMs,
	FieldErrorMessage,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatusCode holds the default value on creation for the "status_code" field.
	DefaultStatusCode int
	// DefaultIsStreaming holds the default value on creation for the "is_streaming" field.
	DefaultIsStreaming bool
	// DefaultInputTokens holds the default value on creation for the "input_tokens" field.
	DefaultInputTokens int
	// DefaultOutputTokens holds the default value on creation for the "output_tokens" field.
	DefaultOutputTokens int
	// DefaultDurationMs holds the default value on creation for the "duration_ms" field.
	DefaultDurationMs float64
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the RequestLog queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByClaudeModel orders the results by the claude_model field.
func ByClaudeModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaudeModel, opts...).ToFunc()
}

// ByOpenaiModel orders the results by the openai_model field.
func ByOpenaiModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpenaiModel, opts...).ToFunc()
}

// ByRequestBody orders the results by the request_body field.
func ByRequestBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequestBody, opts...).ToFunc()
}

// ByResponseBody orders the results by the response_body field.
func ByResponseBody(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResponseBody, opts...).ToFunc()
}

// ByStatusCode orders the results by the status_code field.
func ByStatusCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatusCode, opts...).ToFunc()
}

// ByIsStreaming orders the results by the is_streaming field.
func ByIsStreaming(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsStreaming, opts...).ToFunc()
}

// ByInputTokens orders the results by the input_tokens field.
func ByInputTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInputTokens, opts...).ToFunc()
}

// ByOutputTokens orders the results by the output_tokens field.
func ByOutputTokens(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOutputTokens, opts...).ToFunc()
}

// ByDurationMs orders the results by the duration_ms field.
func ByDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDurationMs, opts...).ToFunc()
}

// ByErrorMessage orders the results by the error_message field.
func ByErrorMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldErrorMessage, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
